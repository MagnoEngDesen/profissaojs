{"version":3,"sources":["Table.js","Form.js","App.js","index.js"],"names":["TableHeader","TableBody","props","rows","charactersData","map","row","index","nome","trabalho","onClick","removerCharacter","Table","Form","handleChange","event","target","name","value","setState","submitForm","handleSubmit","state","initialState","this","htmlFor","type","id","onChange","Component","App","characters","character","filter","i","className","ReactDOM","render","document","getElementById"],"mappings":"sLAYMA,EAAc,WAChB,OACI,gCACI,+BACI,sCACA,0CACA,+CAcVC,EAAY,SAACC,GACf,IAAMC,EAAOD,EAAME,eAAeC,KAAI,SAACC,EAAKC,GACxC,OACG,+BACK,6BAAKD,EAAIE,OACT,6BAAKF,EAAIG,WACT,6BACI,wBAAQC,QAAS,kBAAMR,EAAMS,iBAAiBJ,IAA9C,wBAJAA,MAUhB,OAAO,gCAAQJ,KAIJS,EA/CD,SAACV,GACX,IAAOE,EAAmCF,EAAnCE,eAAeO,EAAoBT,EAApBS,iBAClB,OACI,kCACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAWP,eAAgBA,EAAgBO,iBAAkBA,Q,OCJvEE,E,4MAEFC,aAAe,SAACC,GACZ,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,EAAKC,SAAL,eACKF,EAAOC,K,EAIhBE,WAAa,WACT,EAAKlB,MAAMmB,aAAa,EAAKC,OAC7B,EAAKH,SAAS,EAAKI,e,EAGvBA,aAAe,CACXf,KAAM,GACNC,SAAU,I,EAGda,MAAQ,EAAKC,a,4CACb,WAEI,MAAwBC,KAAKF,MAAtBd,EAAP,EAAOA,KAAMC,EAAb,EAAaA,SAEb,OACI,iCACI,uBAAOgB,QAAQ,OAAf,mBAEA,uBACAC,KAAK,OACLT,KAAK,OACLU,GAAG,OACHT,MAAOV,EACPoB,SAAYJ,KAAKV,eACjB,uBAAOW,QAAQ,WAAf,sBACA,uBACIC,KAAK,OACLC,GAAG,WACHV,KAAK,WACLC,MAAOT,EACPmB,SAAUJ,KAAKV,eACnB,uBACIY,KAAK,SACLR,MAAM,SACNR,QAASc,KAAKJ,oB,GA7CfS,aAmDJhB,IClDTiB,E,4MAEFR,MAAQ,CACJS,WAAY,I,EAGhBV,aAAe,SAACW,GACd,EAAKb,SAAS,CAACY,WAAW,GAAD,mBAAM,EAAKT,MAAMS,YAAjB,CAA6BC,O,EAExDrB,iBAAmB,SAACJ,GAChB,IAAOwB,EAAc,EAAKT,MAAnBS,WAEP,EAAKZ,SAAS,CACVY,WAAYA,EAAWE,QAAO,SAACF,EAAWG,GACtC,OAAOA,IAAM3B,Q,4CAKzB,WACI,IAAOwB,EAAcP,KAAKF,MAAnBS,WACT,OACE,sBAAKI,UAAU,YAAf,UACE,cAAC,EAAD,CAAO/B,eAAgB2B,EAAYpB,iBAAkBa,KAAKb,mBAC1D,cAAC,EAAD,CAAMU,aAAcG,KAAKH,sB,GAxBjBQ,aA6BHC,I,sBC5BfM,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b33e52ba.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Table = (props)=> {\r\n    const {charactersData,removerCharacter} = props\r\n        return (\r\n            <table>\r\n                <TableHeader/>\r\n                <TableBody charactersData={charactersData} removerCharacter={removerCharacter}/>\r\n            </table>\r\n        )\r\n}\r\n\r\nconst TableHeader = () => {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>Nome</th>\r\n                <th>Trabalho</th>\r\n                <th>Deletar</th>\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n/*\r\n    Como podemos ver a função TableBody tem como objetivo busar as propriedades que criamos para na class\r\n    App, dentro do metoto render() foi criado um arry com os elementos e inserido dentro, apos isso \r\n    atribuimos para o para a propiedade que criamos no JSX os elementos do arry...\r\n        Mais é preciso adiconar em Table.js esse elemos para podermos vizualizar, então utilizando a função\r\n    map para a props do componente filho interamos cada componete JSX para cada elemento que existe nos props\r\n    e atribuir para o constante rows, apos isso é usada como retorno\r\n    \r\n*/\r\nconst TableBody = (props) => {\r\n    const rows = props.charactersData.map((row, index) => {\r\n        return (\r\n           <tr key={index}>\r\n                <td>{row.nome}</td>\r\n                <td>{row.trabalho}</td>\r\n                <td>\r\n                    <button onClick={() => props.removerCharacter(index)}>Delete</button>\r\n                </td>\r\n           </tr>\r\n        )\r\n    })\r\n\r\n    return <tbody>{rows}</tbody>\r\n}\r\n\r\n\r\nexport default Table","import React, { Component } from \"react\";\r\n\r\n\r\nclass Form extends Component {\r\n\r\n    handleChange = (event) => {\r\n        const { name, value } = event.target\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    submitForm = () =>{\r\n        this.props.handleSubmit(this.state)\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    initialState = {\r\n        nome: '',\r\n        trabalho: '',\r\n    }\r\n\r\n    state = this.initialState\r\n    render() {\r\n        \r\n        const {nome, trabalho}= this.state\r\n\r\n        return (\r\n            <form>\r\n                <label htmlFor=\"nome\"> Nome</label>\r\n\r\n                <input\r\n                type=\"text\"\r\n                name=\"nome\"\r\n                id=\"nome\"\r\n                value={nome}\r\n                onChange = {this.handleChange}/>\r\n                <label htmlFor=\"trabalho\">Trabalho</label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"trabalho\"\r\n                    name=\"trabalho\"\r\n                    value={trabalho}\r\n                    onChange={this.handleChange}/>\r\n                <input\r\n                    type=\"button\"\r\n                    value=\"Submit\"\r\n                    onClick={this.submitForm}/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form","\r\nimport React, { Component } from 'react';\r\nimport Table from './Table';\r\nimport Form from './Form';\r\nclass App extends Component {\r\n\r\n    state = {\r\n        characters: [],\r\n    }\r\n\r\n    handleSubmit = (character) =>{\r\n      this.setState({characters: [...this.state.characters, character]})\r\n    }\r\n    removerCharacter = (index)=>{\r\n        const {characters} = this.state\r\n\r\n        this.setState({\r\n            characters: characters.filter((characters,i)=>{\r\n                return i !== index\r\n            })\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const {characters} = this.state\r\n      return(\r\n        <div className=\"container\">\r\n          <Table charactersData={characters} removerCharacter={this.removerCharacter} />\r\n          <Form handleSubmit={this.handleSubmit}/>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\nexport default App","import App from './App';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}